2023-04-10 00:02:46 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-04-10 00:02:48 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': None, 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': 4096, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 4096, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 50000, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.0005], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False, 'debug_param_names': False}, 'checkpoint': {'_name': None, 'save_dir': '/scratch4/cs601/tli104/iwslt/de', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'bleu', 'maximize_best_checkpoint_metric': True, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'beam_mt': 0, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'max_len_a_mt': 0.0, 'max_len_b_mt': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'lenpen_mt': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='transformer_iwslt_de_en', activation_dropout=0.0, activation_fn='relu', adam_betas='(0.9, 0.98)', adam_eps=1e-08, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='transformer_iwslt_de_en', attention_dropout=0.0, azureml_logging=False, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_activations=False, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=0.0, combine_valid_subsets=None, continue_once=None, cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy', cross_self_attention=False, curriculum=0, data='data/data-bin-de', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', debug_param_names=False, decoder_attention_heads=4, decoder_embed_dim=512, decoder_embed_path=None, decoder_ffn_embed_dim=1024, decoder_input_dim=512, decoder_layerdrop=0, decoder_layers=6, decoder_layers_to_keep=None, decoder_learned_pos=False, decoder_normalize_before=False, decoder_output_dim=512, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, dropout=0.3, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, empty_cache_freq=0, encoder_attention_heads=4, encoder_embed_dim=512, encoder_embed_path=None, encoder_ffn_embed_dim=1024, encoder_layerdrop=0, encoder_layers=6, encoder_layers_to_keep=None, encoder_learned_pos=False, encoder_normalize_before=False, eos=2, eval_bleu=True, eval_bleu_args='{"beam": 5, "max_len_a": 1.2, "max_len_b": 10}', eval_bleu_detok='moses', eval_bleu_detok_args='{}', eval_bleu_print_samples=True, eval_bleu_remove_bpe='@@ ', eval_tokenized_bleu=False, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=False, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, keep_best_checkpoints=-1, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, label_smoothing=0.1, layernorm_embedding=False, left_pad_source=True, left_pad_target=False, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr=[0.0005], lr_scheduler='inverse_sqrt', max_epoch=0, max_tokens=4096, max_tokens_valid=4096, max_update=50000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, merge_src_tgt_embed=False, min_loss_scale=0.0001, model_parallel_size=1, no_cross_attention=False, no_epoch_checkpoints=True, no_last_checkpoints=False, no_progress_bar=False, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_batch_buckets=0, num_shards=1, num_workers=1, offload_activations=False, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', profile=False, quant_noise_pq=0, quant_noise_pq_block_size=8, quant_noise_scalar=0, quantization_config_path=None, report_accuracy=False, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='/scratch4/cs601/tli104/iwslt/de', save_interval=1, save_interval_updates=0, scoring='bleu', seed=1, sentence_avg=False, shard_id=0, share_all_embeddings=False, share_decoder_input_output_embed=True, skip_invalid_size_inputs_valid_test=False, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_lang=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, target_lang=None, task='translation', tensorboard_logdir=None, threshold_loss_scale=None, tie_adaptive_weights=False, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, upsample_primary=-1, use_bmuf=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, wandb_project=None, warmup_init_lr=-1, warmup_updates=4000, weight_decay=0.0001, write_checkpoints_asynchronously=False, zero_sharding='none'), 'task': {'_name': 'translation', 'data': 'data/data-bin-de', 'source_lang': None, 'target_lang': None, 'load_alignments': False, 'left_pad_source': True, 'left_pad_target': False, 'max_source_positions': 1024, 'max_target_positions': 1024, 'upsample_primary': -1, 'truncate_source': False, 'num_batch_buckets': 0, 'train_subset': 'train', 'dataset_impl': None, 'required_seq_len_multiple': 1, 'eval_bleu': True, 'eval_bleu_args': '{"beam": 5, "max_len_a": 1.2, "max_len_b": 10}', 'eval_bleu_detok': 'moses', 'eval_bleu_detok_args': '{}', 'eval_tokenized_bleu': False, 'eval_bleu_remove_bpe': '@@ ', 'eval_bleu_print_samples': True}, 'criterion': {'_name': 'label_smoothed_cross_entropy', 'label_smoothing': 0.1, 'report_accuracy': False, 'ignore_prefix_size': 0, 'sentence_avg': False}, 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9, 0.98)', 'adam_eps': 1e-08, 'weight_decay': 0.0001, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [0.0005]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 4000, 'warmup_init_lr': -1.0, 'lr': [0.0005]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}}
2023-04-10 00:02:48 | INFO | fairseq.tasks.translation | [de] dictionary: 12001 types
2023-04-10 00:02:48 | INFO | fairseq.tasks.translation | [en] dictionary: 12001 types
2023-04-10 00:02:49 | INFO | fairseq_cli.train | TransformerModel(
  (encoder): TransformerEncoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(12001, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
  )
  (decoder): TransformerDecoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(12001, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (output_projection): Linear(in_features=512, out_features=12001, bias=False)
  )
)
2023-04-10 00:02:49 | INFO | fairseq_cli.train | task: TranslationTask
2023-04-10 00:02:49 | INFO | fairseq_cli.train | model: TransformerModel
2023-04-10 00:02:49 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropyCriterion
2023-04-10 00:02:49 | INFO | fairseq_cli.train | num. shared model params: 43,832,320 (num. trained: 43,832,320)
2023-04-10 00:02:49 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
2023-04-10 00:02:49 | INFO | fairseq.data.data_utils | loaded 7,283 examples from: data/data-bin-de/valid.de-en.de
2023-04-10 00:02:49 | INFO | fairseq.data.data_utils | loaded 7,283 examples from: data/data-bin-de/valid.de-en.en
2023-04-10 00:02:49 | INFO | fairseq.tasks.translation | data/data-bin-de valid de-en 7283 examples
2023-04-10 00:02:50 | INFO | fairseq.trainer | detected shared parameter: decoder.embed_tokens.weight <- decoder.output_projection.weight
2023-04-10 00:02:50 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2023-04-10 00:02:50 | INFO | fairseq.utils | rank   0: capabilities =  8.0  ; total memory = 39.586 GB ; name = A100-PCIE-40GB                          
2023-04-10 00:02:50 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2023-04-10 00:02:50 | INFO | fairseq_cli.train | training on 1 devices (GPUs/TPUs)
2023-04-10 00:02:50 | INFO | fairseq_cli.train | max tokens per device = 4096 and max sentences per device = None
2023-04-10 00:02:50 | INFO | fairseq.trainer | Preparing to load checkpoint /scratch4/cs601/tli104/iwslt/de/checkpoint_last.pt
2023-04-10 00:02:50 | INFO | fairseq.trainer | No existing checkpoint found /scratch4/cs601/tli104/iwslt/de/checkpoint_last.pt
2023-04-10 00:02:50 | INFO | fairseq.trainer | loading train data for epoch 1
2023-04-10 00:02:50 | INFO | fairseq.data.data_utils | loaded 160,239 examples from: data/data-bin-de/train.de-en.de
2023-04-10 00:02:50 | INFO | fairseq.data.data_utils | loaded 160,239 examples from: data/data-bin-de/train.de-en.en
2023-04-10 00:02:50 | INFO | fairseq.tasks.translation | data/data-bin-de train de-en 160239 examples
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | can_reuse_epoch_itr = True
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | reuse_dataloader = True
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | rebuild_batches = False
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | creating new batches for epoch 1
2023-04-10 00:02:50 | INFO | fairseq.trainer | NOTE: your device may support faster training with --fp16 or --amp
2023-04-10 00:02:50 | INFO | fairseq_cli.train | begin dry-run validation on "valid" subset
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | can_reuse_epoch_itr = True
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | reuse_dataloader = True
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | rebuild_batches = False
2023-04-10 00:02:50 | INFO | fairseq.tasks.fairseq_task | creating new batches for epoch 1
2023-04-10 00:02:52 | INFO | fairseq.data.iterators | grouped total_num_itrs = 1101
2023-04-10 00:02:52 | INFO | fairseq.trainer | begin training epoch 1
2023-04-10 00:02:52 | INFO | fairseq_cli.train | Start iterating over samples
2023-04-10 00:03:03 | INFO | train_inner | epoch 001:    100 / 1101 loss=12.8, nll_loss=12.631, ppl=6344.57, wps=33526.5, ups=9.57, wpb=3507.1, bsz=126.9, num_updates=100, lr=1.25e-05, gnorm=3.901, train_wall=11, gb_free=37.3, wall=13
2023-04-10 00:03:14 | INFO | train_inner | epoch 001:    200 / 1101 loss=10.972, nll_loss=10.585, ppl=1535.99, wps=34144.2, ups=9.44, wpb=3616.9, bsz=141.5, num_updates=200, lr=2.5e-05, gnorm=1.563, train_wall=10, gb_free=37.3, wall=24
2023-04-10 00:03:25 | INFO | train_inner | epoch 001:    300 / 1101 loss=10.036, nll_loss=9.504, ppl=726.32, wps=33770.6, ups=9.29, wpb=3633.2, bsz=133.3, num_updates=300, lr=3.75e-05, gnorm=1.609, train_wall=10, gb_free=37.2, wall=34
2023-04-10 00:03:36 | INFO | train_inner | epoch 001:    400 / 1101 loss=9.439, nll_loss=8.772, ppl=437.23, wps=33378.3, ups=9.31, wpb=3583.9, bsz=160.1, num_updates=400, lr=5e-05, gnorm=1.85, train_wall=10, gb_free=37.4, wall=45
2023-04-10 00:03:46 | INFO | train_inner | epoch 001:    500 / 1101 loss=9.292, nll_loss=8.577, ppl=381.95, wps=32975.9, ups=9.21, wpb=3578.6, bsz=149.4, num_updates=500, lr=6.25e-05, gnorm=1.805, train_wall=10, gb_free=37.5, wall=56
2023-04-10 00:03:57 | INFO | train_inner | epoch 001:    600 / 1101 loss=8.962, nll_loss=8.198, ppl=293.56, wps=33946.5, ups=9.3, wpb=3648.6, bsz=155.9, num_updates=600, lr=7.5e-05, gnorm=1.696, train_wall=10, gb_free=37.4, wall=67
2023-04-10 00:04:08 | INFO | train_inner | epoch 001:    700 / 1101 loss=8.732, nll_loss=7.935, ppl=244.7, wps=33503.4, ups=9.29, wpb=3607.3, bsz=167.9, num_updates=700, lr=8.75e-05, gnorm=1.82, train_wall=10, gb_free=37.4, wall=78
2023-04-10 00:04:19 | INFO | train_inner | epoch 001:    800 / 1101 loss=8.691, nll_loss=7.888, ppl=236.83, wps=33347.6, ups=9.38, wpb=3554.7, bsz=133.3, num_updates=800, lr=0.0001, gnorm=1.544, train_wall=10, gb_free=37.3, wall=88
2023-04-10 00:04:29 | INFO | train_inner | epoch 001:    900 / 1101 loss=8.543, nll_loss=7.717, ppl=210.44, wps=32906.8, ups=9.24, wpb=3561.8, bsz=145.8, num_updates=900, lr=0.0001125, gnorm=1.637, train_wall=10, gb_free=37.4, wall=99
2023-04-10 00:04:40 | INFO | train_inner | epoch 001:   1000 / 1101 loss=8.339, nll_loss=7.486, ppl=179.21, wps=33209.1, ups=9.24, wpb=3592.3, bsz=150, num_updates=1000, lr=0.000125, gnorm=1.617, train_wall=10, gb_free=37.5, wall=110
2023-04-10 00:04:51 | INFO | train_inner | epoch 001:   1100 / 1101 loss=8.3, nll_loss=7.438, ppl=173.43, wps=33382, ups=9.46, wpb=3529.9, bsz=136.9, num_updates=1100, lr=0.0001375, gnorm=1.687, train_wall=10, gb_free=37.3, wall=120
2023-04-10 00:04:51 | INFO | fairseq_cli.train | begin validation on "valid" subset
2023-04-10 00:04:51 | INFO | fairseq.tasks.fairseq_task | can_reuse_epoch_itr = True
2023-04-10 00:04:52 | INFO | fairseq.tasks.translation | example hypothesis: ▁so, ▁it 's ▁going ▁to ▁do.
2023-04-10 00:04:52 | INFO | fairseq.tasks.translation | example reference: ▁so ▁nothing ▁is ▁getting ▁through.
2023-04-10 00:04:52 | INFO | fairseq.tasks.translation | example hypothesis: ▁here 's ▁here ▁here.
2023-04-10 00:04:52 | INFO | fairseq.tasks.translation | example reference: ▁here ▁are ▁some ▁recent ▁images.
2023-04-10 00:04:53 | INFO | fairseq.tasks.translation | example hypothesis: ▁but ▁there 's ▁a ▁lot ▁of ▁there.
2023-04-10 00:04:53 | INFO | fairseq.tasks.translation | example reference: ▁but ▁yes ▁there ▁are ▁some ▁solutions.
2023-04-10 00:04:53 | INFO | fairseq.tasks.translation | example hypothesis: ▁we ▁don 't ▁don' t ▁don 't ▁know.
2023-04-10 00:04:53 | INFO | fairseq.tasks.translation | example reference: ▁and ▁they ▁may ▁not ▁want ▁to ▁live ▁exactly ▁like ▁us.
2023-04-10 00:04:54 | INFO | fairseq.tasks.translation | example hypothesis: ▁what 's ▁what ▁you ▁know ▁what ▁you' re ▁going ▁to ▁do.
2023-04-10 00:04:54 | INFO | fairseq.tasks.translation | example reference: ▁you ▁know ▁what? ▁here 's ▁a ▁little ▁secret.
2023-04-10 00:04:54 | INFO | fairseq.tasks.translation | example hypothesis: ▁if ▁we 're ▁going ▁to ▁do ▁that ▁we' re ▁going ▁to ▁do.
2023-04-10 00:04:54 | INFO | fairseq.tasks.translation | example reference: ▁we ▁are ▁only ▁happy ▁when ▁things ▁are ▁in ▁order.
2023-04-10 00:04:55 | INFO | fairseq.tasks.translation | example hypothesis: ▁you 're ▁going ▁to ▁see ▁the ▁time.
2023-04-10 00:04:55 | INFO | fairseq.tasks.translation | example reference: ▁mind less ly ▁taking ▁the ▁first ▁small ▁step.
2023-04-10 00:04:56 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁it 's ▁a ▁lot ▁of ▁people, ▁and ▁it' s ▁going ▁to ▁do ▁with ▁people.
2023-04-10 00:04:56 | INFO | fairseq.tasks.translation | example reference: ▁and ▁also ▁in ▁50 ▁other ▁cities ▁around ▁the ▁world, ▁people ▁participate d.
2023-04-10 00:04:56 | INFO | fairseq.tasks.translation | example hypothesis: ▁they 're ▁going ▁to ▁see ▁the ▁world, ▁but ▁they' re ▁going ▁to ▁see ▁the ▁world.
2023-04-10 00:04:56 | INFO | fairseq.tasks.translation | example reference: ▁they ▁also ▁use ▁the ▁global ▁nature ▁of ▁internet ▁to ▁their ▁advantage.
2023-04-10 00:04:57 | INFO | fairseq.tasks.translation | example hypothesis: ▁i 'm ▁going ▁to ▁be ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot.
2023-04-10 00:04:57 | INFO | fairseq.tasks.translation | example reference: ▁now, ▁i ▁need ▁an ▁as s ist ant.
2023-04-10 00:04:57 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁i 'm ▁going ▁to ▁do ▁it, ▁and ▁i' m ▁going ▁to ▁do ▁it.
2023-04-10 00:04:57 | INFO | fairseq.tasks.translation | example reference: ▁well, ▁a ▁couple ▁of ▁friends ▁and ▁i ▁figured ▁out ▁how ▁to ▁do ▁this.
2023-04-10 00:04:58 | INFO | fairseq.tasks.translation | example hypothesis: ▁so, ▁we 're ▁going ▁to ▁do ▁this ▁is ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁this
2023-04-10 00:04:58 | INFO | fairseq.tasks.translation | example reference: ▁so ▁there ▁are ▁lots ▁of ▁examples ▁like ▁this ▁that ▁we ▁talk ▁about.
2023-04-10 00:04:59 | INFO | fairseq.tasks.translation | example hypothesis: ▁it 's ▁the ▁world ▁of ▁the ▁world ▁of ▁the ▁world ▁of ▁the ▁world.
2023-04-10 00:04:59 | INFO | fairseq.tasks.translation | example reference: ▁all ▁the ▁rest ▁went ▁to ▁the ▁top ▁one ▁percent.
2023-04-10 00:04:59 | INFO | fairseq.tasks.translation | example hypothesis: ▁so ▁that 's ▁going ▁to ▁do ▁the ▁world ▁of ▁the ▁world ▁of ▁the ▁world.
2023-04-10 00:04:59 | INFO | fairseq.tasks.translation | example reference: ▁people ▁-- ▁for ▁law ▁to ▁be ▁the ▁platform ▁for ▁freedom, ▁people ▁have ▁to ▁trust ▁it.
2023-04-10 00:05:00 | INFO | fairseq.tasks.translation | example hypothesis: ▁i 'm ▁going ▁to ▁think ▁that ▁we' re ▁going ▁to ▁do ▁that ▁we 're ▁going ▁to ▁do ▁that ▁we' re ▁going ▁to ▁do ▁that ▁we 've
2023-04-10 00:05:00 | INFO | fairseq.tasks.translation | example reference: ▁i ▁believe ▁that ▁we ▁all ▁have ▁a ▁vision ▁for ▁healthcare ▁in ▁this ▁country.
2023-04-10 00:05:00 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁so, ▁with ▁the ▁time, ▁with ▁the ▁world, ▁and ▁the ▁time, ▁with ▁the ▁world, ▁and ▁the ▁world.
2023-04-10 00:05:00 | INFO | fairseq.tasks.translation | example reference: ▁x en op ho b ia 's ▁on ▁the ▁rise. ▁the ▁traffic king ▁of ▁women ▁and ▁girls.
2023-04-10 00:05:01 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁he ▁said, ▁he ▁said, ▁" i ▁said, ▁he ▁said, ▁he ▁said, ▁" i ▁said, ▁" i ▁said, ▁he ▁said, ▁and ▁he ▁said,
2023-04-10 00:05:01 | INFO | fairseq.tasks.translation | example reference: ▁and ▁he ▁said, ▁" because ▁no ▁one ▁knows ▁you ▁had ▁anything ▁to ▁do ▁with ▁it ."
2023-04-10 00:05:02 | INFO | fairseq.tasks.translation | example hypothesis: ▁so ▁that 's ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁the ▁world.
2023-04-10 00:05:02 | INFO | fairseq.tasks.translation | example reference: ▁humans ▁have ▁long ▁held ▁a ▁fa s ci n ation ▁for ▁the ▁human ▁brain.
2023-04-10 00:05:03 | INFO | fairseq.tasks.translation | example hypothesis: ▁so ▁i 'm ▁going ▁to ▁think ▁that ▁i' m ▁going ▁to ▁think ▁that ▁i 'm ▁going ▁to ▁do ▁that ▁i' m ▁going ▁to ▁do.
2023-04-10 00:05:03 | INFO | fairseq.tasks.translation | example reference: ▁normal. ▁let 's ▁get ▁on ▁schools, ▁something ▁that ▁i' m ▁fairly ▁much ▁a ▁special ist ▁in.
2023-04-10 00:05:03 | INFO | fairseq.tasks.translation | example hypothesis: ▁it 's ▁a ▁lot ▁of ▁the ▁world. ▁it' s ▁in ▁the ▁world. ▁it 's ▁in ▁the ▁world.
2023-04-10 00:05:03 | INFO | fairseq.tasks.translation | example reference: ▁the ▁artist ▁m. c. ▁es cher ▁exploit ed ▁that ▁in ▁some ▁of ▁his ▁wonderful ▁print s.
2023-04-10 00:05:04 | INFO | fairseq.tasks.translation | example hypothesis: ▁so ▁we 're ▁going ▁to ▁know, ▁but ▁we' re ▁going ▁to ▁do ▁that ▁we 're ▁going ▁to ▁do ▁the ▁world.
2023-04-10 00:05:04 | INFO | fairseq.tasks.translation | example reference: ▁speaking ▁of ▁dinosaurs, ▁sharks ▁are ▁basically ▁the ▁same ▁fish ▁they ▁were ▁300 ▁million ▁years ▁ago.
2023-04-10 00:05:04 | INFO | fairseq.tasks.translation | example hypothesis: ▁in ▁fact, ▁you 're ▁going ▁to ▁be ▁a ▁lot ▁of ▁a ▁lot ▁of ▁the ▁world.
2023-04-10 00:05:04 | INFO | fairseq.tasks.translation | example reference: ▁in ▁the ▁lower ▁48, ▁the ▁far the st ▁you ▁can ▁get ▁away ▁from ▁a ▁maintain ed ▁road ▁is ▁20 ▁miles.
2023-04-10 00:05:05 | INFO | fairseq.tasks.translation | example hypothesis: ▁they 're ▁going ▁to ▁know, ▁but ▁they' re ▁going ▁to ▁do ▁what ▁they 're ▁going ▁to ▁do ▁they' re ▁going ▁to ▁do.
2023-04-10 00:05:05 | INFO | fairseq.tasks.translation | example reference: ▁they 're ▁basically ▁attempt s ▁at ▁figuring ▁out ▁what ▁people ▁should ▁do ▁instead ▁of ▁rush ▁hour ▁car ▁driving.
2023-04-10 00:05:06 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁so ▁we 're ▁going ▁to ▁go ▁and ▁then ▁we' re ▁going ▁to ▁go ▁and ▁then ▁we 're ▁going ▁to ▁go ▁in ▁the ▁world.
2023-04-10 00:05:06 | INFO | fairseq.tasks.translation | example reference: ▁so ▁we 've ▁designed ▁products ▁and ▁we ▁analyze d ▁chemicals ▁down ▁to ▁the ▁parts ▁per ▁million.
2023-04-10 00:05:07 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁you 're ▁going ▁to ▁see ▁that ▁you' re ▁going ▁to ▁see ▁the ▁world.
2023-04-10 00:05:07 | INFO | fairseq.tasks.translation | example reference: ▁you ▁need ▁also ▁state ▁ownership, ▁especially ▁of ▁land ▁as set s, ▁in ▁order ▁to ▁build ▁and ▁roll ▁out ▁infrastructure s ▁very ▁quickly.
2023-04-10 00:05:07 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁i ▁said, ▁i 'm ▁going ▁to ▁say, ▁and ▁i' m ▁going ▁to ▁say, ▁and ▁then ▁i 'm ▁going ▁to ▁go.
2023-04-10 00:05:07 | INFO | fairseq.tasks.translation | example reference: ▁she ry l ▁sh ad e: ▁hi, ▁aim e e. ▁aim e e ▁mul lin s: ▁hi.
2023-04-10 00:05:08 | INFO | fairseq.tasks.translation | example hypothesis: ▁but ▁it 's ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁to ▁do ▁that, ▁but ▁it' s ▁not ▁not ▁going ▁to ▁do ▁that ▁was ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁not ▁to ▁be
2023-04-10 00:05:08 | INFO | fairseq.tasks.translation | example reference: ▁ho s pi ce ▁was ▁for ▁people ▁who ▁were ▁dying, ▁and ▁t eren ce ▁wasn 't ▁dying.
2023-04-10 00:05:09 | INFO | fairseq.tasks.translation | example hypothesis: ▁i 'm ▁going ▁to ▁say, ▁i' m ▁going ▁to ▁say, ▁or ▁i 'm ▁going ▁to ▁say, ▁i' m ▁going ▁to ▁say, ▁i 'm ▁going ▁to ▁say, ▁i' m ▁going ▁to ▁say
2023-04-10 00:05:09 | INFO | fairseq.tasks.translation | example reference: ▁i ▁mean, ▁there ▁would ▁be ▁an ▁advantage ▁to ▁experiencing ▁our ▁emotions ▁inside, ▁you ▁know, ▁an ger ▁or ▁happiness.
2023-04-10 00:05:09 | INFO | fairseq.tasks.translation | example hypothesis: ▁so, ▁with ▁the ▁world, ▁with ▁the ▁world, ▁with ▁the ▁world, ▁with ▁the ▁world.
2023-04-10 00:05:09 | INFO | fairseq.tasks.translation | example reference: ▁high ▁perform ers ▁on ▁pi sa ▁embrace ▁diversity ▁with ▁different i ated ▁p ed ago g ical ▁practice s.
2023-04-10 00:05:10 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁if ▁you 're ▁going ▁to ▁do ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot ▁of ▁a ▁lot
2023-04-10 00:05:10 | INFO | fairseq.tasks.translation | example reference: ▁and ▁so, ▁if ▁you ▁think ▁of ▁cancer ▁as ▁a ▁system, ▁there 's ▁an ▁input ▁and ▁an ▁output ▁and ▁a ▁state ▁in ▁the ▁middle.
2023-04-10 00:05:11 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁that 's ▁the ▁world ▁of ▁the ▁world ▁of ▁the ▁world ▁of ▁the ▁world ▁of ▁the ▁world, ▁and ▁the ▁world.
2023-04-10 00:05:11 | INFO | fairseq.tasks.translation | example reference: ▁now ▁the ▁industrial ▁systems ▁of ▁br un el 's ▁time ▁have ▁run ▁their ▁course, ▁and ▁indeed ▁they ▁are ▁part ▁of ▁the ▁problem ▁today.
2023-04-10 00:05:11 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁it 's ▁a ▁lot ▁of ▁the ▁world, ▁and ▁then ▁they' re ▁going ▁to ▁go ▁to ▁be ▁a ▁lot ▁of ▁the ▁world.
2023-04-10 00:05:11 | INFO | fairseq.tasks.translation | example reference: ▁public ▁account ability ▁needs ▁to ▁be ▁promote d ▁through ▁transparency ▁and ▁independent ▁review ▁by ▁non go ver n ment al ▁and ▁international ▁organizations ▁as ▁appropriate.
2023-04-10 00:05:12 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁i 'm ▁going ▁to ▁go ▁in ▁the ▁world, ▁and ▁then ▁i' m ▁going ▁to ▁go ▁in ▁the ▁world, ▁and ▁then ▁i 'm ▁going ▁to ▁go ▁in ▁the ▁world.
2023-04-10 00:05:12 | INFO | fairseq.tasks.translation | example reference: ▁and ▁in ▁grad ▁school ▁i ▁became ▁interested ▁in ▁creatures ▁that ▁d well ▁in ▁the ▁hidden ▁corner s ▁of ▁the ▁city.
2023-04-10 00:05:13 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁so, ▁you 're ▁going ▁to ▁see, ▁and ▁you' re ▁going ▁to ▁do ▁you 're ▁going ▁to ▁see, ▁and ▁you' re ▁going ▁to ▁see ▁a ▁lot ▁of ▁the ▁way, ▁and ▁you 're ▁going ▁to ▁see, ▁and ▁you
2023-04-10 00:05:13 | INFO | fairseq.tasks.translation | example reference: ▁so ▁they ▁made ▁this ▁web ▁service ▁and ▁said, ▁" an y ▁programm er ▁can ▁write ▁a ▁piece ▁of ▁software ▁and ▁tap ▁into ▁the ▁minds ▁of ▁thousands ▁of ▁people ."
2023-04-10 00:05:14 | INFO | fairseq.tasks.translation | example hypothesis: ▁they 're ▁going ▁to ▁see ▁the ▁world ▁of ▁the ▁world, ▁but ▁they' re ▁going ▁to ▁look ▁at ▁the ▁world, ▁the ▁world, ▁the ▁world.
2023-04-10 00:05:14 | INFO | fairseq.tasks.translation | example reference: ▁the ▁position ▁of ▁women, ▁how ▁closely ▁they ▁keep ▁to ▁the ▁nuclear ▁family, ▁are ▁on ▁opposite ▁end s ▁of ▁the ▁pole s ▁in ▁terms ▁of ▁the ▁rich ▁developed ▁world.
2023-04-10 00:05:14 | INFO | fairseq.tasks.translation | example hypothesis: ▁this ▁was ▁the ▁first ▁time ▁of ▁the ▁year ▁of ▁the ▁year, ▁the ▁world ▁was ▁the ▁world, ▁the ▁world, ▁the ▁world, ▁the ▁world ▁was ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁been ▁the ▁world.
2023-04-10 00:05:14 | INFO | fairseq.tasks.translation | example reference: ▁and ▁in ▁the ▁words ▁of ▁malcolm ▁glad well, ▁crack ▁coca ine ▁was ▁the ▁extra - chu n k y ▁version ▁of ▁tomato ▁sauce ▁for ▁the ▁inner ▁city.
2023-04-10 00:05:15 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁here 's ▁a ▁lot ▁of ▁this ▁is, ▁and ▁this ▁is ▁here, ▁and ▁he' s ▁going ▁to ▁do ▁this, ▁and ▁this ▁is ▁a ▁lot ▁of ▁this ▁is ▁a ▁lot ▁of ▁this, ▁and ▁he 's ▁going ▁to ▁do, ▁and ▁"
2023-04-10 00:05:15 | INFO | fairseq.tasks.translation | example reference: ▁this ▁is ▁stanley ▁mil gram, ▁little ▁jewish ▁kid ▁from ▁the ▁bronx, ▁and ▁he ▁asked ▁the ▁question, ▁" co ul d ▁the ▁holocaust ▁happen ▁here, ▁now ?"
2023-04-10 00:05:16 | INFO | fairseq.tasks.translation | example hypothesis: ▁i 'm ▁going ▁to ▁say, ▁" i' m ▁going ▁to ▁say, ▁i 'm ▁going ▁to ▁say, ▁" i' m ▁going ▁to ▁say, ▁" i 'm ▁going ▁to ▁say, ▁" i' m ▁going ▁to ▁say, ▁"
2023-04-10 00:05:16 | INFO | fairseq.tasks.translation | example reference: ▁i ▁mean, ▁can ▁you ▁picture ▁a ▁politician ▁standing ▁up ▁in ▁britain ▁and ▁saying, ▁" g d p ▁fell ▁two ▁percent ▁this ▁year. ▁good ▁news!
2023-04-10 00:05:16 | INFO | fairseq.tasks.translation | example hypothesis: ▁it 's ▁a ▁lot ▁of ▁it' s ▁going ▁to ▁do ▁it, ▁because ▁it 's ▁going ▁to ▁do ▁it' s ▁going ▁to ▁do ▁it 's ▁going ▁to ▁do ▁it' s ▁going ▁to ▁do ▁that ▁it 's ▁going ▁to ▁do ▁it' s ▁going ▁to ▁do ▁it
2023-04-10 00:05:16 | INFO | fairseq.tasks.translation | example reference: ▁it 's ▁by ▁giving ▁away ▁what ▁you ▁think ▁is ▁your ▁deep est ▁secret ▁that ▁maybe ▁millions ▁of ▁people ▁are ▁empower ed ▁to ▁help ▁improve ▁it.
2023-04-10 00:05:17 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁i 'm ▁going ▁to ▁see ▁that ▁i' m ▁going ▁to ▁see ▁that ▁you ▁can ▁see ▁that ▁i 'm ▁going ▁to ▁see ▁that ▁you ▁can ▁can ▁see ▁that ▁you ▁can ▁see ▁you ▁can ▁see ▁you ▁can ▁can ▁can ▁see ▁that ▁you.
2023-04-10 00:05:17 | INFO | fairseq.tasks.translation | example reference: ▁i ▁can ▁still ▁see ▁hill ary ▁doing ▁the ▁shot s ▁of ▁ ry e, ▁dr ib b ling ▁down ▁her ▁chi n, ▁with ▁the ▁steel ▁workers.
2023-04-10 00:05:18 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁we 're ▁going ▁to ▁see ▁that ▁we' re ▁going ▁to ▁see ▁that ▁we 're ▁going ▁to ▁see ▁that ▁we' re ▁going ▁to ▁see ▁that ▁we 're ▁going ▁to ▁see ▁that ▁we' re ▁going ▁to ▁see ▁that ▁we 're ▁going ▁to ▁see ▁that ▁we' re ▁going ▁to
2023-04-10 00:05:18 | INFO | fairseq.tasks.translation | example reference: ▁you 've ▁seen ▁people ▁take ▁beneficial ▁technological ▁advance s, ▁such ▁as ▁the ▁internet ▁we' ve ▁heard ▁about ▁tonight, ▁and ▁twist ▁them ▁into ▁something ▁corrupt ing.
2023-04-10 00:05:19 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁they 're ▁going ▁to ▁say, ▁and ▁they' re ▁going ▁to ▁see ▁that ▁they 're ▁going ▁to ▁see ▁that ▁they' re ▁going ▁to ▁see ▁that ▁they 're ▁going ▁to ▁see ▁that ▁they' re ▁going ▁to ▁see ▁that ▁they 're ▁going ▁to ▁see ▁that ▁they' re ▁going ▁to
2023-04-10 00:05:19 | INFO | fairseq.tasks.translation | example reference: ▁and ▁an ▁early ▁test ▁which ▁argument ▁el ic it ed ▁cooper ative ▁behavior ▁from ▁the ▁people ▁below ▁-- ▁about ▁a ▁hundred ▁to ▁one ▁decided ▁that ▁this ▁was ▁the ▁argument ▁that ▁worked ▁best ▁on ▁us.
2023-04-10 00:05:19 | INFO | fairseq.tasks.translation | example hypothesis: ▁and ▁we 're ▁going ▁to ▁do, ▁and ▁then ▁we' re ▁going ▁to ▁be ▁a ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very ▁very, ▁and ▁we 're ▁going ▁to ▁do, ▁and ▁we' re ▁going ▁to ▁do, ▁and ▁we 're ▁going ▁with
2023-04-10 00:05:19 | INFO | fairseq.tasks.translation | example reference: ▁top ▁left, ▁we ▁have ▁canada ▁and ▁australia, ▁with ▁enormous ▁land ▁areas, ▁very ▁high ▁per ▁capita ▁consumption, ▁200 ▁or ▁300 ▁light ▁bulb s ▁per ▁person, ▁and ▁very ▁low ▁population ▁den s ities.
